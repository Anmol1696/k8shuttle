name: E2E tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency: stagging

    env:
      DEVNET_NAME: starship-devnet
      DEVNET_NAMESPACE: starship-ci

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/

      - name: Create Kubeconfig
        run: |
          touch /tmp/kubeconfig
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.AWS_EKS_CLUSTER }} --kubeconfig /tmp/kubeconfig

      - name: Read kubeconfig
        id: kubeconfig
        uses: juliangruber/read-file-action@v1
        with:
          path: /tmp/kubeconfig

      - name: Bazel cache
        id: bazel-cache
        uses: actions/cache@v2
        env:
          version: 4.2.1
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-{{ env.version }}-bazel-cache

      - name: Install bazelisk
        run: |
          curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.1.0/bazelisk-linux-amd64"
          mkdir -p "${GITHUB_WORKSPACE}/bin/"
          mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
          chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

      - name: Setup Test infra
        uses: cosmology-tech/starship-action@0.2.7
        with:
          values: tests/config.yaml
          port-forward: true
          version: 0.0.0
          chart: ./charts/devnet
          kubeconfig: ${{ steps.kubeconfig.outputs.content }}
          name: ${{ env.DEVNET_NAME }}
          namespace: ${{ env.DEVNET_NAMESPACE }}

      - name: Run tests
        run: |
          bazel test --cache_test_results=no --test_output=all //tests:tests

      # todo: change this to be post step of the action
      - name: Cleanup cluster
        if: always()
        run: |
          helm delete $DEVNET_NAME --debug --namespace $DEVNET_NAMESPACE --wait || true
