load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_cross_binary", "go_library")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")
load("@io_bazel_rules_docker//container:container.bzl", "container_bundle", "container_image", "container_push")

go_library(
    name = "exposer_lib",
    srcs = [
        "app.go",
        "config.go",
        "const.go",
        "error.go",
        "handler.go",
        "main.go",
        "model.go",
    ],
    importpath = "github.com/cosmology-tech/starship/exposer",
    visibility = ["//visibility:public"],
    deps = [
        "//proto/exposer:exposer_go_proto",
        "@com_github_go_chi_chi//middleware",
        "@com_github_go_chi_render//:go_default_library",
        "@com_github_golang_protobuf//jsonpb",
        "@com_github_grpc_ecosystem_go_grpc_middleware//:go-grpc-middleware",
        "@com_github_grpc_ecosystem_go_grpc_middleware//logging/zap",
        "@com_github_grpc_ecosystem_go_grpc_middleware//recovery",
        "@com_github_grpc_ecosystem_go_grpc_middleware//tags",
        "@com_github_grpc_ecosystem_grpc_gateway_v2//runtime",
        "@com_github_urfave_cli//:cli",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//types/known/emptypb",
        "@org_uber_go_zap//:zap",
    ],
)

go_binary(
    name = "exposer",
    embed = [":exposer_lib"],
    static = "on",
    visibility = ["//visibility:public"],
)

go_cross_binary(
    name = "exposer_arm64",
    platform = "@io_bazel_rules_go//go/toolchain:linux_arm64",
    target = ":exposer",
)

# Build docker images now
go_image(
    name = "image",
    base = "@base_linux_x86//image",
    binary = ":exposer",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

go_image(
    name = "image_arm64",
    base = "@base_linux_arm64//image",
    binary = ":exposer_arm64",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

container_bundle(
    name = "image_bundle",
    images = {
        "index.docker.io/anmol1696/exposer:latest": ":image",
        "index.docker.io/anmol1696/exposer:$(DOCKER_TAG_NAME)": ":image",
        "index.docker.io/anmol1696/exposer:latest-arm64": ":image_arm64",
        "index.docker.io/anmol1696/exposer:$(DOCKER_TAG_NAME)-arm64": ":image_arm64",
    },
    tags = ["manual"],
)

docker_push(
    name = "image_push",
    bundle = ":image_bundle",
    skip_unchanged_digest = True,
    tags = ["manual"],
)
