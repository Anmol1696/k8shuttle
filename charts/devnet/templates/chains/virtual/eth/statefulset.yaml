{{- range $chain := .Values.chains }}
{{- if eq $chain.type "virtual" }}
{{- if eq $chain.subtype "eth" }}

{{ $defaultChain := get $.Values.defaultChains $chain.subtype | default dict }}
{{ $chain = merge $chain $defaultChain }}


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prysm
spec:
  serviceName: "prysm"
  # todo: support multiple nodes
  replicas: 1
  selector:
    matchLabels:
      app: prysm
  template:
    metadata:
      labels:
        app: prysm
    # adapted from https://github.com/rauljordan/eth-pos-devnet/blob/master/docker-compose.yml
    spec:
      initContainers:
        - name: init
          image: alpine/openssl
          command: ['sh', '-c', "if [ -e /ethereum/.init ]; then exit 0; fi; \
            rm -rf /ethereum/{execution,consensus}; \
            mkdir -p /ethereum/consensus/{beacon,validator} /ethereum/execution \
            && cd /ethereum/consensus; \
            stat genesis.ssz || wget -S {{ $chain.genesisStateUrl }};" ]
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
        - name: init-chmod-data
          image: busybox
          command: ['sh', '-c', 'chmod -R 0600 /ethereum/consensus/']
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
        - name: geth-account-init
          image: {{ $chain.geth.image }}
          command: ['sh', '-c', "if [ -e /ethereum/.init ]; then exit 0; fi; geth --datadir=/ethereum/execution account import --password /dev/null /etc/secrets/secret.json"]
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: secrets
              mountPath: /etc/secrets
              readOnly: true
        - name: init-done
          image: alpine/openssl
          command: ['sh', '-c', "touch /ethereum/.init"]
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
      containers:
        - name: geth
          image: {{ $chain.geth.image }}
          args:
            {{- range $arg := $chain.geth.args }}
            - {{ $arg -}}
            {{ end }}
          workingDir: /ethereum/execution
          ports:
            - name: geth-http
              containerPort: 8545
            - name: geth-authrpc
              containerPort: 8551
            - name: p2p-tcp
              containerPort: 30303
            - name: p2p-udp
              containerPort: 30303
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: secrets
              mountPath: /etc/secrets
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 1Gi
        - name: beacon-chain
          image: {{ $chain.beaconChain.image }}
          command: {{ $chain.beaconChain.command }}
          args:
            {{- range $arg := $chain.beaconChain.args }}
            - {{ $arg -}}
            {{ end }}
          workingDir: /ethereum/consensus
          ports:
            - name: beacon-api
              containerPort: 3500
            - name: beacon-grpc
              containerPort: 4000
            - name: beacon-web
              containerPort: 8080
          volumeMounts:
            - name: ethereum
              mountPath: /ethereum
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: secrets
              mountPath: /etc/secrets
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 1Gi
      {{- include "imagePullSecrets" $chain | indent 6 }}
      volumes:
        - name: secrets
          secret:
            secretName: geth
        - name: config
          configMap:
            name: eth2
  volumeClaimTemplates:
    - metadata:
        name: ethereum
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: hostpath
        resources:
          requests:
            storage: 10Gi

{{- end }}
{{- end }}
{{- end }}