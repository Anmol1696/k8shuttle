{{- range $chain := .Values.chains }}
{{ $dataExposer := dict "chain" $chain.name "port" ($.Values.exposer.ports.rest | quote | default "8081") }}
{{ $defaultChain := get $.Values.defaultChains $chain.type | default dict }}

# merge defaultChain values into the $chain dict
{{ $chain = merge $chain $defaultChain }}

{{- $upgrade := $chain.upgrade | default (dict "enabled" false) }}
{{- $build := .build | default (dict "enabled" false) -}}
{{- $toBuild := or $build.enabled $upgrade.enabled }}

{{ $image := $chain.image }}
{{- if $toBuild }}
{{ $image = "anmol1696/runner:latest" }}
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $chain.name }}-genesis
spec:
  serviceName: {{ $chain.name }}-genesis
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $chain.type }}
      app.kubernetes.io/name: {{ $chain.name }}-genesis
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: {{ $chain.type }}
        app.kubernetes.io/type: {{ $chain.name }}
        app.kubernetes.io/name: {{ $chain.name }}-genesis
        app.kubernetes.io/version: {{ $.Chart.AppVersion }}
    spec:
      initContainers:
        {{- if $toBuild }}
        - name: init-build-images
          image: anmol1696/builder:latest
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - "-c"
            - |
              # Install cosmovisor
              go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@v1.0.0

              # Build genesis
              {{- if $upgrade.enabled  }}
              UPGRADE_NAME=genesis CODE_TAG={{ $chain.upgrade.genesis }} bash -e /scripts/build_chain.sh
              {{- range $upgrade := $chain.upgrade.upgrades }}
              UPGRADE_NAME={{ $upgrade.name }} CODE_TAG={{ $upgrade.version }} bash -e /scripts/build_chain.sh
              {{- end }}
              {{- else if $build.enabled }}
              UPGRADE_NAME=genesis CODE_TAG={{ $chain.build.source }} bash -e /scripts/build_chain.sh
              {{- end }}
          env:
            - name: CODE_REF
              value: {{ $chain.repo }}
            - name: UPGRADE_DIR
              value: {{ $chain.home }}/cosmovisor
            - name: GOBIN
              value: /go/bin
            - name: CHAIN_NAME
              value: {{ $chain.name }}
            {{ include "devnet.defaultEvnVars" $chain | indent 12 }}
          resources: {{- include "devnet.init.resources" $.Values | trim | nindent 12 }}
          volumeMounts:
            - mountPath: {{ $chain.home }}
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
        {{- end }}
        - name: init-genesis
          image: {{ $image }}
          imagePullPolicy: Always
          env:
            {{- include "devnet.defaultEvnVars" $chain | indent 12 }}
            {{- include "devnet.evnVars" $chain | indent 12 }}
            {{- include "devnet.timeoutVars" $.Values | indent 12 }}
            - name: KEYS_CONFIG
              value: /configs/keys.json
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"
              {{- if $toBuild }}
              cp $CHAIN_DIR/cosmovisor/genesis/bin/$CHAIN_BIN /usr/bin
              {{- end }}

              echo "Running setup and config files..."
              bash -e /scripts/setup_genesis.sh
              bash -e /scripts/setup_config.sh
          resources: {{- include "devnet.init.resources" $.Values | trim | nindent 12 }}
          volumeMounts:
            - mountPath: {{ $chain.home }}
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
      containers:
        - name: validator
          image: {{ $image }}
          imagePullPolicy: Always
          env:
            {{- include "devnet.defaultEvnVars" $chain | indent 12 }}
            {{- include "devnet.evnVars" $chain | indent 12 }}
            - name: COLLECTOR_SERVICE
              value: collector
            - name: COLLECTOR_PORT
              value: "8070"
          command:
            - bash
            - "-c"
            - |
              {{- if $toBuild }}
              /usr/bin/cosmovisor start
              {{- else }}
              $CHAIN_BIN start
              {{- end }}
          resources: {{- include "devnet.node.resources" ( dict "node" $chain "context" $ ) | trim | nindent 12 }}
          volumeMounts:
            - mountPath: {{ $chain.home }}
              name: node
            - mountPath: /configs
              name: addresses
            - mountPath: /scripts
              name: scripts
          {{- if $.Values.collector.enabled }}
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - "-c"
                  - "-e"
                  - |
                    VAL_INDEX=${HOSTNAME##*-}
                    VAL_NAME=$(jq -r ".genesis[$VAL_INDEX].name" /configs/keys.json)
                    echo "Validator Index: $VAL_INDEX, Key name: $VAL_NAME"

                    COLLECTOR_HOST=http://$COLLECTOR_SERVICE.$NAMESPACE.svc.cluster.local:$COLLECTOR_PORT
                    VAL_NAME=$VAL_NAME COLLECTOR_HOST=$COLLECTOR_HOST bash -e /scripts/register_snapshots.sh
          {{- end }}
        - name: exposer
          image: {{ $.Values.exposer.image }}
          imagePullPolicy: Always
          env:
            {{- include "devnet.genesisVars" $dataExposer | indent 12}}
            - name: EXPOSER_HTTP_PORT
              value: "8081"
            - name: EXPOSER_GRPC_PORT
              value: "9099"
            - name: EXPOSER_GENESIS_FILE
              value: {{ $chain.home }}/config/genesis.json
            - name: EXPOSER_MNEMONIC_FILE
              value: /configs/keys.json
            - name: EXPOSER_PRIV_VAL_FILE
              value: {{ $chain.home }}/config/priv_validator_key.json
          command: [ "/app/exposer/exposer" ]
          resources:
{{ toYaml $.Values.exposer.resources | nindent 12 }}
          volumeMounts:
            - mountPath: {{ $chain.home }}
              name: node
            - mountPath: /configs
              name: addresses
      volumes:
        - name: node
          emptyDir: { }
        - name: addresses
          configMap:
            name: keys
        - name: scripts
          configMap:
            name: setup-scripts
---
{{- end }}
