load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_cross_binary", "go_library")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")
load("@io_bazel_rules_docker//container:container.bzl", "container_bundle", "container_image", "container_push")

go_library(
    name = "registry_lib",
    srcs = [
        "app.go",
        "chain.go",
        "config.go",
        "const.go",
        "handler.go",
        "main.go",
        "model.go",
    ],
    importpath = "github.com/Anmol1696/starship/registry",
    visibility = ["//visibility:public"],
    deps = [
        "//proto/registry:registry_go_proto",
        "//registry/vendor/github.com/cosmos/ibc-go/v7/modules/core/02-client/types",
        "//registry/vendor/github.com/cosmos/ibc-go/v7/modules/core/exported",
        "//registry/vendor/github.com/cosmos/ibc-go/v7/modules/light-clients/07-tendermint",
        "//registry/vendor/github.com/go-chi/chi/middleware",
        "//registry/vendor/github.com/golang/protobuf/jsonpb",
        "//registry/vendor/github.com/golang/protobuf/proto",
        "//registry/vendor/github.com/grpc-ecosystem/go-grpc-middleware",
        "//registry/vendor/github.com/grpc-ecosystem/go-grpc-middleware/logging/zap",
        "//registry/vendor/github.com/grpc-ecosystem/go-grpc-middleware/recovery",
        "//registry/vendor/github.com/grpc-ecosystem/go-grpc-middleware/tags",
        "//registry/vendor/github.com/grpc-ecosystem/grpc-gateway/v2/runtime",
        "//registry/vendor/github.com/strangelove-ventures/lens/client",
        "//registry/vendor/github.com/strangelove-ventures/lens/client/query",
        "//registry/vendor/github.com/urfave/cli",
        "//registry/vendor/go.uber.org/zap",
        "//registry/vendor/google.golang.org/grpc",
        "//registry/vendor/google.golang.org/grpc/codes",
        "//registry/vendor/google.golang.org/grpc/status",
        "//registry/vendor/google.golang.org/protobuf/types/known/emptypb",
    ],
)

go_binary(
    name = "registry",
    embed = [":registry_lib"],
    static = "on",
    visibility = ["//visibility:public"],
)

go_cross_binary(
    name = "registry_arm64",
    platform = "@io_bazel_rules_go//go/toolchain:linux_arm64",
    target = ":registry",
)

# Build docker images now
go_image(
    name = "image",
    base = "@base_linux_x86//image",
    binary = ":registry",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

go_image(
    name = "image_arm64",
    base = "@base_linux_arm64//image",
    binary = ":registry_arm64",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

container_bundle(
    name = "image_bundle",
    images = {
        "index.docker.io/anmol1696/registry:latest": ":image",
        "index.docker.io/anmol1696/registry:$(DOCKER_TAG_NAME)": ":image",
        "index.docker.io/anmol1696/registry:latest-arm64": ":image_arm64",
        "index.docker.io/anmol1696/registry:$(DOCKER_TAG_NAME)-arm64": ":image_arm64",
    },
    tags = ["manual"],
)

docker_push(
    name = "image_push",
    bundle = ":image_bundle",
    skip_unchanged_digest = True,
    tags = ["manual"],
)
